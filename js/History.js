// Generated by CoffeeScript 1.12.4
var Event, Type, history, isDev, location, sessionStorage, type;

isDev = require("isDev");

Event = require("eve");

Type = require("Type");

history = window.history, location = window.location, sessionStorage = window.sessionStorage;

type = Type("History");

type.defineValues(function() {
  return {
    didPush: Event(),
    didPop: Event()
  };
});

type.definePrototype({
  path: {
    get: function() {
      return this._path;
    },
    set: function(path) {
      if (!path.startsWith("/")) {
        path = "/" + path;
      }
      if (isDev && path === this._path) {
        throw Error("Cannot set 'path' to its current value!");
      }
      this._setPath(path);
      history.replaceState({
        id: this._length
      }, null, path);
    }
  },
  parts: {
    get: function() {
      return this._parts;
    }
  },
  length: {
    get: function() {
      return this._length;
    },
    set: function(length) {
      if (length < this._length) {
        if (length < 0) {
          history.go(0 - this._length);
        } else {
          history.go(length - this._length);
        }
      }
    }
  }
});

type.defineMethods({
  push: function(path) {
    var length;
    if (!path.startsWith("/")) {
      path = "/" + path;
    }
    if (isDev && path === this._path) {
      throw Error("Cannot call 'push' with the current path!");
    }
    this._setPath(path);
    this._updateLength(length = this._length + 1);
    history.pushState({
      id: length
    }, null, path);
    this.didPush.emit(path);
  },
  pop: function() {
    if (this._length > 0) {
      history.back();
    }
  }
});

type.defineValues({
  _path: null,
  _parts: null,
  _length: null
});

type.initInstance(function() {
  this._length = this._loadLength();
  this._setPath(location.pathname);
  window.addEventListener("popstate", this._stateChanged.bind(this));
});

type.defineMethods({
  _setPath: function(path) {
    this._path = path;
    this._parts = path.slice(1).split("/");
  },
  _loadLength: function() {
    var length;
    if (length = sessionStorage.getItem("history.length")) {
      return parseInt(length);
    } else {
      return 0;
    }
  },
  _updateLength: function(length) {
    this._length = length;
    sessionStorage.setItem("history.length", String(length));
  },
  _stateChanged: function(arg) {
    var path, state;
    state = arg.state;
    path = location.pathname;
    if (path === this._path) {
      return;
    }
    this._setPath(path);
    if (state === null) {
      this._updateLength(0);
      this.didPop.emit(path);
      return;
    }
    if (state.id > this._length) {
      this._updateLength(state.id);
      this.didPush.emit(path);
      return;
    }
    this._updateLength(state.id);
    this.didPop.emit(path);
  }
});

module.exports = type.construct();
